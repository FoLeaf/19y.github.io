[{"content":"![[Pasted image 20250217104715.png]] ![[Pasted image 20250217104803.png]]\n![[Pasted image 20250217115425.png]] ![[Pasted image 20250217151824.png]] ![[Pasted image 20250217152223.png]]\n[!NOTE]\n关键字 inline 的作用\rinline 是 C/C++ 中的关键字，用于建议编译器将函数内联展开（即在调用处直接插入函数代码，而非生成函数调用指令）。它的主要影响包括：\n选项 描述 是否正确？ 原因 A：降低栈内存的消耗 ✅ 正确 ✔️ 内联函数避免了函数调用的栈帧开销（如参数压栈、返回地址保存等），从而减少栈内存使用。 B：可以提高代码的运行效率 ✅ 正确 ✔️ 内联消除了函数调用的开销（跳转、返回等），可能提升运行效率（但过度内联可能导致代码膨胀，反而降低缓存命中率）。 C：可以提高微控制器访问内部寄存器的速度 ❌ 错误 ✖️ inline 与寄存器访问速度无关，这是由硬件和编译器优化决定的，而非内联函数的功能。 D：程序中大量使用，会增大代码编译后的可执行文件的大小 ✅ 正确 ✔️ 内联会导致函数代码被多次复制到调用处，若滥用会显著增加二进制文件大小。 ![[Pasted image 20250312095023.png]]\n[!NOTE] 答案:D，最高位为1，为负数，负数的补码等于反码取反+1，负数取反符号位不变，得11010100，+1得11010101\n![[Pasted image 20250312095838.png]]\n[!NOTE] D：AHB2 在 STM32G4 系列中，GPIO 外设是挂载在 AHB2 总线 上的，因此需要在 RCC 的 AHB2 外设时钟寄存器 (RCC_AHB2ENR) 中使能对应的 GPIO 端口时钟。\n![[Pasted image 20250312100030.png]] ![[Pasted image 20250312101836.png]] ![[Pasted image 20250312103331.png]] ![[Pasted image 20250312103615.png]]\n![[Pasted image 20250312104611.png]] ![[Pasted image 20250312104140.png]] ![[Pasted image 20250312104926.png]]\n总结：选项解析\r选项 内容 正确性 原因 ​A 具有电流放大作用 ✅ 三极管的核心功能（基极电流控制集电极电流）。 ​B 内部有2个PN结 ✅ 发射结+集电结，缺一不可。 ​C 具有单向导电性 ❌ 这是二极管的特性，三极管工作模式复杂，无单向性。 ​D 有集电区、基区、发射区 ✅ 三极管的基本结构组成。 [!NOTE] 三极管由三个半导体区（发射极、基极、集电极）组成，内部包含两个PN结（BE结和BC结）。\n![[Pasted image 20250312105155.png]]\n[!NOTE]\n各选项电路的常见应用场景\rA. 同相比例电路\r• 功能：对输入信号进行线性放大（增益由电阻决定）。\n• 典型应用：\n• 信号放大（如传感器信号调理）。\n• 阻抗匹配（高输入阻抗，低输出阻抗）。\n• 不适用场景：波形转换（仅放大幅度，不改变形状）。\nB. 同相求和电路\r• 功能：将多个输入信号加权相加。\n• 典型应用：\n• 音频混频（混合多路信号）。\n• 传感器信号融合（如温度+压力信号叠加）。\n• 不适用场景：波形转换（仅叠加信号，不改变单个波形特性）。\nC. 微分电路\r• 功能：输出信号与输入信号的变化率（导数）成正比。\n• 典型应用：\n• 三角波→方波转换（如本题）。\n• 边缘检测（脉冲信号生成）。\n• 控制系统中的误差微分补偿（PID控制器中的D项）。\n• 注意事项：对高频噪声敏感，需配合低通滤波。\nD. 积分电路\r• 功能：输出信号与输入信号的积分（时间累积）成正比。\n• 典型应用：\n• 方波→三角波转换（与微分电路相反）。\n• 模拟计算（如求解微分方程）。\n• 电源中的PWM滤波（转换为直流电平）。\n• 注意事项：需防止运放饱和（添加复位电路）。\n总结：如何选择电路？\r需求 适用电路 示例 放大信号幅度 同相比例（A） 放大麦克风信号 混合多路信号 同相求和（B） 音频混音器 三角波→方波转换 微分（C） 信号发生器、触发电路 方波→三角波转换 积分（D） PWM转模拟电压 [!NOTE]\n关键区别：\n• 微分（C）和积分（D） 是波形转换的核心电路，但作用相反。\n• 比例（A）和求和（B） 仅处理信号幅度或叠加，不改变波形本质。\n建议结合具体需求（如是否需要波形变换、信号放大或混合）选择电路类型。 ![[Pasted image 20250312105211.png]]\n有源元件 vs. 无源元件\r​特性 ​有源元件 ​无源元件 ​能量需求 必须外接电源供电 无需外部电源 ​功能 放大、开关、振荡、信号控制 消耗、存储或滤波能量（无增益） ​典型例子 晶体管、运放、逻辑芯片 电阻、电容、电感 ![[Pasted image 20250312105231.png]] ![[Pasted image 20250312105334.png]] ![[Pasted image 20250312105621.png]] ![[Pasted image 20250312105650.png]] ![[Pasted image 20250312105802.png]]\n[!NOTE] 此类题目去手册memory map找\n![[Pasted image 20250312105915.png]] ![[Pasted image 20250312111236.png]]\n[!NOTE]\n1. 同步串行（Synchronous Serial）​\r​定义：数据按单一位流依次传输，发送方和接收方通过共享时钟信号同步时序。 ​核心特点： ​单数据线：逐位传输（如I²C、SPI、UART*）。 ​时钟同步：发送和接收端共用时钟（CLK）信号，确保时序一致。 ​低引脚数：节省硬件资源（适合远距离或引脚受限场景）。 ​典型应用： 传感器通信（如温度传感器通过I²C传输数据）。 存储器读写（如SPI接口的Flash芯片）。 *注：UART本质是异步串行，但可通过外部时钟同步化。\n​2. 同步并行（Synchronous Parallel）​\r​定义：数据通过多根数据线并行传输，所有位在同一时钟周期内同步发送。 ​核心特点： ​多数据线：每位占用一条物理线（如8位数据需8根线）。 ​时钟同步：时钟信号控制所有线路的同步采样。 ​高速传输：单时钟周期完成多比特传输（理论速度更快）。 ​典型应用： 高速内存接口（如DDR SDRAM）。 早期CPU与外围芯片通信（如ISA总线）。 ![[Pasted image 20250312111540.png]] ![[Pasted image 20250312112058.png]] ![[Pasted image 20250312112407.png]] ![[Pasted image 20250312112748.png]]\n[!NOTE] 专用引脚加起来有大约12个（比如4个VDD，4个VSS，1个NRST，2个OSC，2个SWD，可能还有其他），那么剩下的IO数目大概是64-12=52个\n![[Pasted image 20250312112900.png]]\n[!NOTE] ==指数部分1.2是小数，违反指数必须为整数的规则。==\n==- 错误：2e1.2（指数非整数）、1.2e3.4（指数非整数）。== ==正确：2e+3（正指数符号可省略）、1e-5（负整数指数）。== ![[Pasted image 20250312143932.png]] ![[Pasted image 20250312144144.png]] ![[Pasted image 20250312144601.png]] ![[Pasted image 20250312145218.png]]\n[!NOTE]\n​RS触发器的约束口诀：​​“RS=11是禁忌，输出混乱要规避”​。 ​JK触发器的优势：​​“JK无约束，11可翻转”​。 ![[Pasted image 20250312150818.png]]![[Pasted image 20250312152618.png]] ![[Pasted image 20250312152911.png]] ![[Pasted image 20250312152937.png]] ![[Pasted image 20250312153141.png]] ![[Pasted image 20250312153812.png]]![[Pasted image 20250314153142.png]] ![[Pasted image 20250317160414.png]]\n![[Pasted image 20250317161316.png]] ![[Pasted image 20250317204316.png]]\n[!NOTE] Title 注意得用变化的集电极电流除以基极电流 β定义为三极管放大倍数\n![[Pasted image 20250317205222.png]] ![[Pasted image 20250317205239.png]] ![[Pasted image 20250319112128.png]]\n[!NOTE] 这道题目考察的是数字电路中组合逻辑电路和时序逻辑电路的分类理解。我们可以通过以下逻辑进行分析：\n​核心概念区分： ​组合逻辑电路：输出仅由当前输入决定（无记忆功能），如编码器、译码器、数据选择器、加法器。 ​时序逻辑电路：输出不仅取决于当前输入，还与电路原来的状态有关（有存储功能），如计数器、寄存器、移位寄存器。 ​选项解析：\n​A. 编码器​（组合逻辑）：将特定输入信号转换为二进制编码，无状态存储。 ​B. 计数器​（时序逻辑）：通过触发器记录脉冲个数，具有状态存储和更新功能。 ​C. 译码器​（组合逻辑）：将二进制编码转换为特定输出信号，无状态依赖。 ​D. 数据选择器​（组合逻辑）：根据选择信号输出对应输入通道的数据，无记忆。 ​关键判断依据：\n时序电路必须包含存储元件（如触发器），而计数器内部由触发器构成，能够通过时钟信号实现计数状态的保存和递进。其他三个选项均不涉及状态存储。\n记忆技巧：\n联想\u0026quot;时序\u0026quot;与\u0026quot;时间顺序\u0026quot;，需要记录状态变化的电路（如计数、存储）属于时序逻辑。 常见时序电路：计数器、寄存器、序列检测器。 常见组合电路：编码/译码器、数据选择/分配器、加法器、比较器。 通过理解电路是否具备\u0026quot;记忆能力\u0026quot;，可以快速判断此类题型。\n![[Pasted image 20250319112228.png]]![[Pasted image 20250319112251.png]]\n[!NOTE]\n核心概念解析\r穿透电流ICEO：指基极开路时（IB=0），集电极-发射极之间的漏电流。它由少数载流子的漂移运动形成，是衡量晶体管性能的重要参数。\n​选项逐项分析\r​A：温度稳定性（正确）​\n​原因：ICEO对温度极为敏感。温度升高 → 本征激发增强 → 少数载流子浓度增加 → ICEO显著增大。 ​意义：ICEO的大小直接反映晶体管在不同温度下的稳定性。若ICEO过大，高温下可能导致晶体管热失控。 ​B：最大电流极限参数（争议性正确）​\n​争议点：传统上，晶体管的最大电流极限参数是ICM​（集电极最大电流），而非ICEO。ICEO是微安级漏电流，远小于极限电流。 ​可能的出题逻辑：若题目将ICEO视为“设计时需限制的参数”（如过高的ICEO可能影响可靠性），则B可视为正确。但需注意，严格来说ICEO不属于“允许通过的最大电流”。 ​C：放大能力（错误）​\n​原因：放大能力由电流放大系数β（或hFE）决定，与ICEO无直接关系。 ​D：频率特性（错误）​\n​原因：频率特性与结电容、载流子渡越时间相关，而ICEO反映的是漏电流特性。 ​用户得分0分的原因\r​正确答案需同时选A和B：用户仅选择B，漏选A导致未得分。 ​关键误区：可能误将ICEO与极限电流参数（如ICM）关联，但未意识到其温度敏感性的核心作用。 ​记忆技巧\r​穿透电流的两面性： ​温度稳定性​（A）：联想“温度升高→漏电流飙升→稳定性差”。 ​极限参数（若题目接受B）​：需注意题目可能的隐含设定，但实际应用中需区分ICEO与ICM。 ​排除法： 放大能力（C）→ 直接排除（与β相关）。 频率特性（D）→ 排除（与结电容相关）。 ​总结\r​核心考点：穿透电流ICEO的双重特性（温度稳定性 + 设计限制参数）。 ![[Pasted image 20250319112832.png]]\n[!NOTE]\n核心解题思路\r​运算放大器的两种工作状态：\n​线性区：输出信号与输入信号成比例关系（实现放大功能）。 ​非线性区​（饱和区）：输出信号为电源电压的正/负极限值（用作比较器或开关）。 ​关键条件：负反馈\n运算放大器要工作在线性区，​必须引入负反馈​（将输出信号通过反馈网络送回反相输入端）。 ​作用： 抑制开环增益的极高不稳定性（典型开环增益为 105∼106）。 通过负反馈调整闭环增益，使输出与输入保持线性关系。 ​选项排除分析：\n​B. 正反馈：会导致输出迅速饱和（进入非线性区），无法线性放大（例：振荡电路）。 ​C. 开环：无反馈时运放开环增益极大，输入微小差异即饱和，无法稳定放大。 ​D. 振荡：属于非线性应用（需正反馈），与线性放大无关。 ​记忆技巧\r​联想公式：线性放大 → Vout​=ACL​⋅(V+​−V−​)（ACL​ 为闭环增益，由负反馈决定）。 ​对比应用场景： ​负反馈：放大器、滤波器、积分电路（线性应用）。 ​正反馈/开环：比较器、施密特触发器、振荡器（非线性应用）。 ​常见误区提醒\r​误区：“运放必须开环才能放大信号”。 ​纠正：开环时运放极易饱和，实际放大电路必须通过负反馈闭环工作。 ​误区：“正反馈可以稳定放大信号”。 ​纠正：正反馈会加速输出进入饱和状态，破坏线性关系。 ​总结\r​核心结论：负反馈是运放工作在线性区的必要条件。 ​答题关键：直接关联“线性区”与“负反馈”，排除其他非线性工作模式。 ![[Pasted image 20250319113352.png]]\n[!NOTE]\n​ROM（Read-Only Memory，只读存储器）​：通常指Flash Memory，用于存储程序代码和常量数据（如代码固化后不可修改）。 ​RAM（Random Access Memory，随机存取存储器）​：用于存储临时变量和运行时数据（易失性，断电丢失）。 ​寄存器：CPU内部的存储单元，用于指令执行和临时操作，不存储程序代码。 ​E2PROM（Electrically Erasable Programmable ROM）​：可擦写的非易失性存储器，用于存储配置参数等需长期保存的数据。 ![[Pasted image 20250319113604.png]]\n[!NOTE]\nA. RCC（正确）​\r​中断类型：RCC（Reset and Clock Control）相关中断，如时钟安全系统（CSS）中断、PLL就绪中断等。 ​优先级配置： 属于可屏蔽中断，优先级通过NVIC（嵌套向量中断控制器）配置。 例如，CSS中断的优先级可设置为低于其他关键中断（如NMI），但高于普通外设中断。 ​用户可能误解：误认为RCC是系统核心功能（如时钟配置）的中断优先级不可调，但实际优先级是可配置的。 ​B. NMI（错误）​\r​中断类型：NMI（Non-Maskable Interrupt，不可屏蔽中断），用于处理严重硬件错误（如电源故障）。 ​优先级配置： ​优先级固定为最高​（逻辑优先级最高，不可修改）。 无法通过NVIC或其他方式调整优先级。 ​用户错误原因：可能混淆了“不可屏蔽”与“优先级不可配置”的关系，误认为NMI优先级可调。 ​C. HardFault（错误）​\r​中断类型：HardFault（硬件错误异常），由非法操作（如访问未定义内存）触发。 ​优先级配置： ​优先级固定为-1（最高优先级）​，属于系统级异常，不可配置。 任何优先级配置操作对HardFault无效。 ​关键区别：HardFault是异常（Exception），而非普通中断，优先级机制与中断不同。 ​D. Systick（正确）​\r​中断类型：Systick（系统定时器中断），用于操作系统任务调度或定时触发。 ​优先级配置： 优先级通过NVIC配置，与普通外设中断相同。 例如，在RTOS中可降低Systick优先级以避免影响高实时性任务。 ​用户可能忽略：误认为Systick是内核功能优先级固定，但其优先级可自由设置。 ![[Pasted image 20250321210736.png]]\n![[Pasted image 20250321210746.png]]\n![[Pasted image 20250321210754.png]] ![[Pasted image 20250321210802.png]] ![[Pasted image 20250321210809.png]] ![[Pasted image 20250321210821.png]]![[Pasted image 20250322181310.png]]\n[!NOTE]\n许多同学一眼看见有“+3 V”和“+9 V”两条支路，就会直觉认为输出可能会是 3 V 或 9 V，结果往往忽略了那条最关键的“通向 0 V”支路。事实上，因为“通向 0 V” 的二极管最先导通，输出会被它死死地钳到 0 V，根本“上不去”3 V 或 9 V。 ![[Pasted image 20250322182341.png]] ![[Pasted image 20250322182643.png]]\n[!NOTE]\nD: 可以通过软件控制SysTick定时器启动和停止\r​正确\n通过设置控制寄存器（CTRL）的ENABLE位，可直接用软件启动或停止SysTick计数器。例如：\nc\n1 2 SysTick-\u0026gt;CTRL |= SysTick_CTRL_ENABLE_Msk; // 启动 SysTick-\u0026gt;CTRL \u0026amp;= ~SysTick_CTRL_ENABLE_Msk; // 停止 ![[Pasted image 20250322182727.png]]\n[!NOTE]\n“跨平台可移植（D）”并非嵌入式系统的普遍特征\r嵌入式系统通常“紧耦合”硬件\n对特定硬件平台进行了定制优化，大量驱动、库函数都与目标硬件的寄存器、外设紧密关联。\n要想“跨平台移植”，往往要重新适配甚至重写底层驱动、硬件抽象层，远没有通用 PC 软件那样“轻松”移植。\n跨平台可移植更多是通用软件的特点\n例如使用高级语言编写的桌面应用、跨平台库（Qt、Java 虚拟机等）等，编译或运行时只要目标平台能提供兼容环境，就能跑起来。\n而嵌入式软件因其“贴近底层硬件、资源有限、功能定制”等特点，移植并非轻而易举。\n虽然部分嵌入式 RTOS 或应用层可以做到一定程度的可移植性，但这并不是所有嵌入式系统的共性。不少教材或考试题更倾向于强调嵌入式的“专用、定制、不可随意跨平台”的一面，因此D 往往被排除。\n![[Pasted image 20250322182800.png]]\n![[Pasted image 20250322183431.png]] ![[Pasted image 20250325190843.png]] ![[Pasted image 20250325190853.png]] ![[Pasted image 20250325191110.png]]\n[!NOTE] 在电子技术里，当题目说“电压增益为 -20 dB”时，指的是用分贝（dB）来度量“电压增益（Voltage Gain）”这一物理量。关键公式是：\nAv(dB)=20×log⁡10(Av)A_{v}(dB) = 20 \\times \\log_{10} \\bigl(A_{v}\\bigr)\n其中 AvA_{v} 是线性电压增益（即“倍数”形式的增益），Av(dB)A_{v}(dB) 是分贝形式的电压增益。根据题意，已知\nAv(dB)=−20 dBA_{v}(dB) = -20 \\text{ dB}\n那么就可以列方程：\n−20=20×log⁡10(Av)-20 = 20 \\times \\log_{10}\\bigl(A_{v}\\bigr)\n接下来一步步求解：\n把 20 移到左边\nlog⁡10(Av)=−2020=−1\\log_{10}\\bigl(A_{v}\\bigr) = \\frac{-20}{20} = -1\n对数换为线性量\nAv=10−1=0.1A_{v} = 10^{-1} = 0.1\n所以当电压增益为 -20 dB 时，对应的线性电压增益是 0.10.1 倍（也可以理解为衰减 10 倍）。因此题目中的正确答案是 0.1 倍。\n![[Pasted image 20250325191402.png]]\n[!NOTE] 从题目与选项来看，这道题考察的是多级放大电路的通频带(带宽)随级数增加而变化的规律。题目给出的选项是：\nA：变宽\nB：变窄\nC：不变\nD：无关\n而“正确答案：B”，说明多级放大电路的通频带会变窄。下面是推理过程：\n1. 多级放大电路的频率特性叠加\r一个单级放大电路在其高频端和低频端都会受到各种因素（如电容、电感、寄生参数等）的影响，从而在某个频段内保持较好的增益。当把若干单级放大电路串联（多级放大）时，总的通频带（带宽）会受到各级放大电路频率特性的共同制约。\n在低频端：耦合电容、旁路电容以及输入/输出耦合电容等，都会对低频响应产生影响；多级串联后，低频端的截止点可能会上移。\n在高频端：器件本身的寄生电容、电感等导致的高频滚降，随着级数的增加也会更明显；多级串联后，高频端的截止点会更早下降。\n因此，从整体来看，多级放大电路的通频带往往比单级放大电路变窄。\n2. 理论依据：极点与零点的叠加\r在“网络理论”或“控制理论”的角度，每级放大电路都可以用相应的极点和零点来描述它的频率响应。串联多级放大器时，其传递函数相当于各级传递函数的连乘：\nHtotal(s)=H1(s)×H2(s)×⋯×Hn(s)H_{\\text{total}}(s) = H_1(s) \\times H_2(s) \\times \\cdots \\times H_n(s)\n每个 Hi(s)H_i(s) 都有自己的一组极点和零点；\n连乘后，极点和零点会叠加到一起，通常会使得总带宽变得更窄。\n3. 结论\r由于多级放大器的总通频带是各级通频带综合作用的结果，而每级的高低频衰减特性相叠加后，往往导致整体频率范围（带宽）变窄，这是理论与实际中都能观察到的普遍规律。所以正确答案为 B：变窄。\n![[Pasted image 20250325191635.png]]\n[!NOTE]\n1. 7 位地址模式\r最常见、最普及的地址模式就是 7 位地址模式。\n7 位地址占据总传输字节中的高 7 位，第 8 位则通常用来表示读/写位（R/W）。\n2. 10 位地址模式\r在某些场合下，需要更多设备地址时会采用 10 位地址模式。\n10 位地址模式时，会使用一个特定的前缀（如 11110XX）来表示这是 10 位地址，然后再后续的字节里传送剩余的地址位。\n3. “8 位”与“4 位”的误解\r有人将“7 位地址 + 1 位读写标志”误以为是“8 位地址”，但在 I²C 协议定义中，读写标志并不计入地址位数，因此不存在“8 位地址模式”。\n至于“4 位地址模式”，则更不在官方规范内，也没有被广泛使用或支持。\n![[Pasted image 20250325192106.png]]\n[!NOTE]\n关键分析逻辑\r单端信号 vs 差分信号\n• 单端信号（如SPI、UART-TTL、I2C）：信号电平以地为参考，必须共地才能正确识别逻辑电平。\n• 差分信号（如RS485）：通过两条线的电压差传递信号，理论上无需共地，但实际中可能需共地以消除地电位差带来的风险。\n逐个协议分析\n• SPI（B）：单端信号，主从设备需共用时钟和数据的参考地。若地不共，逻辑电平会因参考点不同而误判。\n• UART-TTL（C）：单端信号，发送端和接收端的GND必须相连，否则无法正确识别高低电平。\n• RS485（D）：虽然为差分信号，但长距离通信时地电位差可能导致共模电压超限，损坏接口。实际应用中常要求共地以保护设备。\n• I2C（A）：单端信号且依赖上拉电阻，常规情况下需共地。但题目未将其列为正确答案，可能是出题者认为I2C可通过隔离器或电平转换器不共地（需结合题目设定）。\n用户错误点\n• 用户选择了I2C（A），但根据题目设定，正确答案排除A，说明题目可能认为I2C无需强制共地（与实际常规认知存在差异）。\n• 用户漏选RS485（D），未考虑其实际应用中的共地需求。\n结论\r• 必须共地的通信方式：SPI（B）、UART-TTL（C）、RS485（D）。\n• 推理核心：单端信号协议（B、C）必须共地；差分信号（D）虽理论无需，但实际为安全需共地。\n• 题目潜在争议：I2C常规需共地，但题目答案未包含，可能源于出题者的特定设定或错误。\n建议在考试中优先遵循题目设定，但实际开发需严格参考协议规范。\n![[Pasted image 20250326175042.png]]\n[!NOTE] 在TTL（Transistor-Transistor Logic，晶体管-晶体管逻辑）电路中，输入端如果悬空（未接任何电平），默认状态通常会被视为高电平。原因如下：\nTTL输入的结构特点：\nTTL输入端内部通常包含上拉电阻，使其在未连接外部信号时自然拉高到逻辑高电平（通常接近Vcc）。\n这与CMOS电路不同，CMOS电路的悬空输入通常会导致状态不确定。\n悬空时的默认逻辑：\n由于内部的上拉特性，悬空时等效于高电平，而不是低电平或接地。 为什么“C：等效于接地”是错误的？\n接地意味着输入被明确连接到GND，而TTL的悬空状态不会主动拉到GND，而是上拉到高电平。 为什么不是“D：状态不确定”？\n在TTL电路中，典型的未连接输入会被默认拉高到高电平，因此并不会出现不确定状态。 ![[Pasted image 20250326175553.png]]\n![[Pasted image 20250326180215.png]]\n[!NOTE]\n关键概念理解\r伏安特性曲线\n二极管的正向伏安特性曲线表示其导通电流（I）与正向电压（V）的关系。在正向偏置下，电流随电压指数增长，但需要克服一个“导通电压”（硅管约0.7V，锗管约0.3V）。\n温度对二极管的影响\n• 导通电压（V_f）的温度依赖性：\n温度每升高1℃，二极管的导通电压会减小约2mV。反之，温度下降时，导通电压会略微增大。 • 载流子迁移率：\n温度降低时，半导体内部的载流子（电子和空穴）热运动减弱，迁移率降低，导致相同电压下电流减小。\n解题逻辑\r题目问的是环境温度下降时，正向伏安特性曲线的变化趋势。\n• 正确逻辑链：\n3. 温度下降 → 导通电压（V_f）增大 → 需要更高的电压才能产生相同的电流。\n4. 温度下降 → 载流子迁移率降低 → 相同电压下的电流减小。\n综合结果：\n曲线整体会向右移动（即相同电流需要更高的电压，或相同电压下电流更小）。\n选项分析\r• A. 左移❌：表示相同电流需要更低的电压，对应温度升高的情况。\n• B. 右移✅：正确。温度下降时，导通电压增大，曲线右移。\n• C. 上移❌：表示相同电压下电流更大，与温度降低时电流减小的现象矛盾。\n• D. 下移❌：表示电流整体减小，但题目问的是曲线的横向位移（电压变化），而非纵向平移（电流变化）。\n常见误区\r• 误选C（上移）：可能混淆了“电流变化”与“曲线平移”的概念。\n• 温度下降时，虽然相同电压下的电流会减小（曲线下移），但题目问的是“伏安特性曲线”的整体变化趋势，需关注导通电压的变化（右移）。\n• 举例：若温度从25℃降到0℃，导通电压从0.7V变为0.72V，此时曲线需右移0.02V才能达到相同电流。\n总结\r正确答案：B（右移）\n温度下降导致二极管导通电压略微增大，且载流子迁移率降低，因此伏安特性曲线整体向右移动。\n![[Pasted image 20250326180450.png]] ![[Pasted image 20250326180802.png]]![[Pasted image 20250327154948.png]] STM32微控制器提供的流水线级别为B:3级。\n[!NOTE]\n流水线的定义与作用\r流水线是一种通过将指令执行分解为多个阶段（如取指、解码、执行）并并行处理的技术，以提高处理器的效率和吞吐率。其核心思想类似工厂的生产流水线，每个阶段专注于特定任务，多指令可同时处于不同阶段，从而减少整体执行时间。\nSTM32的流水线设计\r三级流水线\n对于采用Cortex-M3内核的STM32微控制器（如STM32F103系列），其流水线为3级，包括：\n• 取指（Fetch）：从存储器中读取指令。\n• 解码（Decode）：解析指令的操作逻辑。\n• 执行（Execute）：执行指令的运算或操作。\n这种设计能在流水线填满后实现指令的并行处理，显著提升效率。\n不同内核的差异\n• Cortex-M0/M1/M3：均为3级流水线。\n• Cortex-M7：采用更先进的6级双发射流水线，可同时处理两条指令，性能更高。\n流水线的实际影响\r• 性能优化：流水线通过并行操作减少指令执行的平均周期数，例如STM32的1.25MIPS/MHz指标即受益于此设计。\n• 分支预测与中断处理：CM3内核在解码阶段进行分支预测，减少跳转时的流水线停顿。\n综上，**选项B（3级）**为正确答案，适用于大多数STM32系列（如M3内核）。若涉及M7内核则需单独考量。\n![[Pasted image 20250327155311.png]]![[Pasted image 20250329202856.png]]\n[!NOTE] 根据题目描述，8位地址的IIC总线理论上可挂载的从器件数量取决于地址分配规则：\nIIC地址结构：7位用于从机地址（最高位为读写位），因此实际可用地址范围为0x00~0x7F（共128个地址）。 保留地址：IIC协议保留部分地址（如广播地址0x00、设备ID地址等），实际可用地址通常为 127个（选项D正确）。 用户误区：选择A（256）可能是误将8位二进制全部用于地址，未考虑协议限制。 建议复习IIC地址分配原理，重点关注7位地址空间及保留地址的排除规则。\n![[Pasted image 20250329203034.png]] ![[Pasted image 20250330165228.png]] ![[Pasted image 20250330165537.png]]\n负反馈类型 反馈信号性质 主要作用 应用场景 电压负反馈 输出电压 稳定输出电压，降低输出阻抗 稳压电源、音频功率放大器 电流负反馈 输出电流 稳定输出电流，提高输出阻抗 恒流源、LED驱动、电池充电器 串联负反馈 串联电压 提高输入阻抗 传感器放大器、高阻抗信号源 并联负反馈 并联电流 降低输入阻抗 运算放大器反相放大器、低阻抗信号源 ![[Pasted image 20250330174208.png]] [!NOTE]\nT触发器的工作原理：\rT触发器是一种特殊的触发器，具有一个输入端（T）和一个时钟信号（CLK）。它的功能如下：\n当 T = 0 时：\n触发器保持当前状态不变，输出不会发生变化。 这对应于 保持 功能。 当 T = 1 时：\n每当时钟信号的触发边沿（如上升沿或下降沿）到来时，触发器的输出会翻转状态。 如果当前输出为 0，它会变成 1；如果当前输出为 1，它会变成 0。 这种状态翻转的行为正好对应于 计数 功能（即在二进制计数中实现“加1”操作）。 ![[Pasted image 20250330174616.png]]\n[!NOTE]\n电源从星形改成三角形联结：\n电源的线电压变大了（增大 $\\sqrt{3}$ 倍）。 但为了保持总功率不变，电源的线电流必须减小。 负载电流的变化：\n负载是星形联结，它的电流直接由电源提供。 由于电源的电流减小，负载的电流也会随之减小。 所以，负载电流有效值会减小。\n答案：B: 减小\n![[Pasted image 20250330174826.png]]\n[!NOTE] 移位寄存器是一种能够存储和移动数据的数字电路，其核心是通过时钟信号控制数据在触发器之间的传递。为了实现移位寄存器的功能，通常需要使用 边沿触发的触发器，因为它们能够在时钟信号的特定边沿（如上升沿或下降沿）捕获输入并更新输出，从而保证数据的同步传递。\n选项分析：\rA. D触发器\nD触发器是一种边沿触发的触发器，具有一个数据输入端（D）和一个时钟输入端（CLK）。当时钟信号到达触发边沿时，D触发器会将输入端的数据传递到输出端。这种特性使得D触发器非常适合用于构建移位寄存器，因为每个D触发器可以在时钟信号的作用下，依次将数据传递到下一个触发器，从而实现数据的“移位”功能。因此，D触发器是构成移位寄存器的最佳选择。\nB. JK触发器\nJK触发器也是一种边沿触发的触发器，但它有更复杂的功能（如置位、复位、保持和翻转），并且需要两个输入（J和K）。虽然理论上可以用JK触发器构建移位寄存器，但其实现过程较为复杂，且不如D触发器直接和高效。因此，JK触发器一般不作为首选。\nC. 锁存器\n锁存器是电平触发的存储元件，它在时钟信号处于特定电平（如高电平或低电平）时透明地传递输入信号。由于锁存器对时钟信号的电平敏感，而不是边沿敏感，因此在构建移位寄存器时容易出现竞争和冒险问题，导致数据不稳定。所以，锁存器不适合用来构建移位寄存器。\nD. T触发器\nT触发器是一种特殊的触发器，主要用于计数器和分频器的设计。它的功能是在时钟信号的触发边沿翻转输出状态（如果T=1），或者保持输出不变（如果T=0）。由于T触发器没有直接的数据输入端，因此无法像D触发器那样方便地用于数据的移位操作。\n为什么选A？\rD触发器是边沿触发的，能够确保数据在时钟信号的特定边沿被捕获和传递，避免了竞争和冒险问题。 D触发器结构简单，只需一个数据输入端（D）即可实现数据的存储和传递，非常适合用于移位寄存器的设计。 移位寄存器的核心需求是数据的同步移位，而D触发器正好满足这一需求，能够通过级联的方式实现多位数据的移位操作。 因此，答案是 A: D触发器。\nJK触发器\rJK触发器是一种功能全面的边沿触发式触发器，具有两个输入端：J和K。它克服了基本RS触发器中存在的不确定状态（也称为不稳定状态或非法状态）的问题，并且在时钟脉冲的作用下能够实现多种逻辑功能。\nJ 输入：用于设置触发器的状态。 K 输入：用于复位触发器的状态。 时钟输入 (CLK)：控制触发器何时响应J和K输入的变化。 JK触发器的主要特点包括：\n当J=1, K=0时，在时钟脉冲的上升沿（或下降沿，取决于具体设计），触发器被置位（输出为1）。 当J=0, K=1时，在时钟脉冲的作用下，触发器被复位（输出为0）。 当J=1, K=1时，每次时钟脉冲到来时，触发器会翻转其当前状态（即从0到1或者从1到0），这种操作有时被称为“计数”模式。 当J=0, K=0时，触发器保持当前状态不变。 RS触发器\rRS触发器是较为基础的一种触发器类型，具有两个输入端：R（Reset）和S（Set）。它的功能相对简单，但存在一个潜在问题——当R和S同时为有效电平时，会导致不确定的状态。\nR 输入：复位输入，用于将触发器状态设置为0。 S 输入：置位输入，用于将触发器状态设置为1。 RS触发器的特点如下：\n如果S=1, R=0，则触发器被置位（输出为1）。 如果S=0, R=1，则触发器被复位（输出为0）。 如果S=0, R=0，则触发器保持先前的状态不变。 如果S=1, R=1，则触发器进入不确定状态，因为这会导致相互矛盾的操作（同时尝试设置和复位），可能导致不可预测的行为。 总结\rJK触发器提供了更广泛的逻辑功能，包括置位、复位、保持和翻转，并解决了RS触发器中的不确定状态问题。 RS触发器虽然结构简单，但由于存在S和R同时有效时的不确定状态，限制了它的应用范围。 两种触发器都在数字电路中有着重要的作用，但JK触发器由于其灵活性和稳定性，通常被认为是更为通用的选择。\n![[Pasted image 20250401163429.png]]\n[!NOTE]\n逐项解析\r✅ B：单片机的主频越高，其运算速度越快\r• 正确：单片机的主频（时钟频率）决定了CPU执行指令的速度，主频越高，单位时间内能执行的指令越多，运算速度越快。\n• 注意：虽然主频影响速度，但实际性能还受架构、指令集、缓存等因素影响。\n✅ C：机器周期是指完成一个基本操作所需要的时间\r• 正确：机器周期（Machine Cycle）是CPU执行一个基本操作（如取指、译码、执行）所需的时间，通常由多个时钟周期组成。\n❌ A：PC是一个可寻址的寄存器\r• 错误：PC（Program Counter，程序计数器）用于存储下一条指令的地址，但它通常不可直接寻址（即不能像通用寄存器那样用指令直接读写）。\n❌ D：场效应管与三极管都是电流控制器件\r• 错误：\n• 三极管（BJT）是电流控制器件（基极电流控制集电极电流）。\n• 场效应管（FET）是电压控制器件（栅极电压控制漏极电流）。\n错误原因与改进建议\r误选A：混淆了PC与通用寄存器的区别，PC通常不可直接寻址。 误选D：未区分三极管（电流控制）和场效应管（电压控制）。 改进方法：\n• 复习单片机架构（PC、寄存器、时钟周期等概念）。\n• 区分电子器件控制方式（BJT vs FET）。 总结\r• 正确答案：B、C（主频影响速度，机器周期是基本操作时间）。\n• 错误选项：A、D（PC不可直接寻址，FET是电压控制）。\n• 建议：重点理解单片机工作原理和半导体器件特性，避免概念混淆。\n[!NOTE] 这是 Keil 调试器中的 Registers（寄存器）窗口，它显示了 ARM Cortex-M 内核的寄存器状态。下面是每个参数的含义：\nCore（通用寄存器）\r这些是 Cortex-M 处理器的通用寄存器（R0-R15）：\nR0-R12：通用寄存器，通常用于存储计算数据和函数参数。\nR13（SP）：堆栈指针（Stack Pointer），指向当前栈顶。\nR14（LR）：链接寄存器（Link Register），存储函数返回地址。\nR15（PC）：程序计数器（Program Counter），指向当前执行的指令地址。\nxPSR（程序状态寄存器）\rxPSR（Program Status Register）：存储当前执行状态，包括：\nN（负标志）、Z（零标志）、C（进位标志）、V（溢出标志）。\nThumb 状态位（T 位）。\n异常号（如果在中断上下文中）。\nBanked（堆栈指针）\rMSP（Main Stack Pointer）：主堆栈指针，通常在特权模式下使用。\nPSP（Process Stack Pointer）：进程堆栈指针，通常用于用户模式任务。\nSystem（系统寄存器）\rBASEPRI：基本优先级屏蔽寄存器，设置屏蔽的最低中断优先级。\nPRIMASK：优先级掩码，设置为 1 时屏蔽所有可屏蔽中断（除了 NMI 和 HardFault）。\nFAULTMASK：故障掩码，设置为 1 时屏蔽所有异常（包括 HardFault，但不包括 NMI）。\nCONTROL：控制寄存器，决定是否使用 PSP 以及是否进入特权模式：\nBit 0: 0 = 使用 MSP，1 = 使用 PSP。\nBit 1: 0 = 运行在特权模式，1 = 运行在用户模式。\nInternal（内部状态）\rMode：当前模式（Thread 表示线程模式，Handler 表示中断处理模式）。\nPrivilege：当前特权级（Privileged 表示特权模式，Unprivileged 表示非特权模式）。\nStack：当前使用的堆栈（MSP 或 PSP）。\nStates：CPU 状态信息，可能包含调试状态、异常状态等。\nSec：程序运行时间（秒）。\nFPU（浮点运算单元，若启用）\r如果启用了 FPU（浮点运算单元），会有如下寄存器：\nS：单精度浮点寄存器（S0-S31）。\nD：双精度浮点寄存器（D0-D15）。\nFloat/Double：存储浮点运算数据。\nFPSCR（浮点状态和控制寄存器）：控制浮点计算行为，存储计算结果状态（如溢出、舍入模式等）。\n![[Pasted image 20250401165327.png]] 放大电路需要增益，但是也需要平衡稳定性和带宽。\n[!NOTE] 这道题考察的是负反馈对放大电路的作用，你的答案是 A、B、D，但正确答案是 A、B、C，我们来分析一下各选项的对错：\nA：提高放大电路的稳定性 ✅\n负反馈可以减少增益对元件参数的依赖，提高电路的稳定性，因此这个选项是正确的。\nB：减小非线性失真 ✅\n负反馈可以降低放大电路的非线性失真，提高信号的线性度，因此这个选项是正确的。\nC：减小放大增益 ✅\n负反馈会降低放大电路的增益（但提升稳定性和带宽），所以这个选项是正确的。\nD：会增强控制对控制对象的反应 ❌\n这个说法通常出现在自动控制系统中，而在模拟放大电路中，负反馈会降低增益，可能会使响应速度变慢，因此这个选项是错误的。\n你的错误在于选了 D，而正确答案是 C。下次遇到类似题目时，要注意区分自动控制与放大电路的概念。😊\n[!NOTE]\n负反馈用于提高系统稳定性、减小失真、控制增益，广泛应用于放大器、稳压器、自动控制系统等。\n正反馈用于产生振荡、信号再生或状态切换，如振荡器、施密特触发器、无线电接收机等。\n负反馈让系统趋于稳定，正反馈让系统趋于变化，各自适用于不同的场景。\n所以，如果你希望电路稳定、抗干扰，一般用负反馈；如果你希望电路产生振荡或快速切换状态，一般用正反馈！😊\n![[Pasted image 20250401174118.png]]\n[!NOTE]\n为什么是积分电路？\n输入电压通过电阻\\(R\\)进入运放的反相输入端。 电容\\(C\\)连接在运放的反相输入端和输出端之间。 在这种设置下，输出电压与输入电压的时间积分成比例。换句话说，输出电压是输入电压随时间累积结果的反映。 它的作用是什么？\n积分电路能够将输入信号的变化率转换为输出电压水平。如果输入是一个固定不变的电压，输出会随着时间线性增加或减少（取决于输入电压的正负）。 这种电路常用于模拟计算中执行积分操作，比如在信号处理、滤波器设计以及控制系统中。 简单来说，该电路之所以被识别为积分电路，是因为它能对输入电压进行积分操作，并在输出端产生相应的电压变化。因此，正确答案是D：积分电路。\n![[Pasted image 20250402153619.png]] ![[Pasted image 20250402153748.png]]\n[!NOTE]\n选项A：HSI\n​错误原因：HSI是主时钟源之一，STOP模式下主时钟全部关闭（包括HSI、HSE、PLL）。 只有独立于主时钟的LSI（内部低速RC振荡器）或LSE（外部低速晶振）可能保持运行（用于RTC/IWDG）。 ​选项B：PLL\n​错误原因：PLL依赖HSI/HSE时钟输入，STOP模式下主时钟关闭，PLL必然停止。 ​选项C：ADC\n​错误原因：ADC依赖APB2总线时钟（来自主时钟），STOP模式下ADC无法运行。 即使ADC配置了独立时钟（某些型号支持），STOP模式下也会被关闭。 ​选项D：以上均不正确\n​正确原因：HSI、PLL、ADC在STOP模式下均不运行，只有不依赖主时钟的外设（如RTC/IWDG）可能工作。 1. 运行模式 (Run Mode)\r​特点：CPU 正常运行，所有外设可用\n​功耗：最高（取决于时钟频率和外设使用情况）\n​唤醒方式：N/A（已经是活动模式）\n​适用场景：正常操作时使用\n2. 睡眠模式 (Sleep Mode)\r​进入方式：执行 WFI (Wait For Interrupt) 或 WFE (Wait For Event) 指令 ​特点： CPU 停止运行 外设保持运行（时钟继续供给） 所有中断和事件都可以唤醒 ​功耗：中等（比运行模式低） ​唤醒时间：最快（只需恢复 CPU 运行） ​适用场景：短时间空闲等待中断 3. 停止模式 (Stop Mode)\r​进入方式：设置 PWR_CR 寄存器中的 LPDS 位和 PDDS 位，然后执行 WFI/WFE ​特点： 1.8V 域的所有时钟停止 保留 SRAM 和寄存器内容 可选择保持电压调节器开启(LPDS=0)或进入低功耗调节器模式(LPDS=1) 部分外设可以工作（如独立看门狗、RTC） ​功耗：低（μA 级别） ​唤醒方式： 外部中断（EXTI） RTC 闹钟 独立看门狗中断 ​唤醒时间：较快（需要重新启动时钟） ​适用场景：较长时间的低功耗需求，需要快速唤醒 4. 待机模式 (Standby Mode)\r​进入方式：设置 PWR_CR 寄存器中的 PDDS 位，然后执行 WFI/WFE ​特点： 1.8V 域断电（除备份域和待机电路） SRAM 和寄存器内容丢失（备份寄存器保持） 所有外设停止工作 可以选择保持 RTC 和备份寄存器供电 ​功耗：最低（nA 级别） ​唤醒方式： NRST 引脚外部复位 IWDG 复位 WKUP 引脚上升沿 RTC 闹钟 ​唤醒时间：最长（相当于复位，需要重新初始化系统） ​适用场景：极低功耗需求，可以接受复位式唤醒 5. 低功耗运行模式 (Low-power Run Mode)\r​特点： CPU 运行在较低频率 使用低功耗电压调节器 外设可以工作在降低的性能水平 ​功耗：介于运行模式和睡眠模式之间 ​适用场景：需要持续运行但功耗敏感的应用 ![[Pasted image 20250402155101.png]] ![[Pasted image 20250402155439.png]]\n[!NOTE] 查询手册 ![[Pasted image 20250402155450.png]] ![[Pasted image 20250402155506.png]] ![[Pasted image 20250402155711.png]]\n![[Pasted image 20250402160107.png]]\n[!NOTE]\n1. ​光电二极管的核心特性\r光电二极管（Photodiode）是一种将光信号转换为电信号的半导体器件，其关键特性如下：\n（1）​PN结结构（选项A）​\r​正确性：✔️\n所有光电二极管内部至少有一个PN结，这是其实现光电转换的基础结构。 工作原理：光子在PN结附近激发电子-空穴对，形成光电流。 （2）​电路连接方式（选项B/C）​\r​反接（选项B）​：✔️\n光电二极管在电路中通常反向偏置（反接）​：\n阴极接正电压，阳极接负电压（或地）。 目的：增大耗尽区宽度，提高光电转换效率和响应速度。 ​反偏时的行为：无光照时仅有微小暗电流；有光照时产生显著光电流。 ​正接（选项C）​：❌\n若正向偏置（正接），PN结导通，光电特性被掩盖，失去光敏功能。\n（3）​光敏感性（选项D）​\r​正确性：✔️\n光电二极管对环境光强度高度敏感，输出电流与光照强度成正比（线性关系）。 应用场景：光强检测、红外遥控、光纤通信等。 ","date":"2025-04-04T14:56:49+08:00","permalink":"http://localhost:1313/p/blue-bridge-cup-choose/","title":"蓝桥杯嵌入式选择题部分错题集"},{"content":"Markdown 全格式测试文档\r1. 标题与段落\r这是普通段落，展示加粗、斜体、删除线和行内代码。\n换行需在行尾添加两个空格或使用\u0026lt;br\u0026gt;标签。\n2. 列表与任务\r无序列表\r苹果 香蕉 进口香蕉 本地香蕉 有序列表\r打开IDE 创建项目 编写代码 任务列表\r学习Markdown基础 掌握高级表格技巧 3. 代码与语法高亮\r行内代码：print(\u0026quot;Hello Markdown\u0026quot;)\n1 2 3 4 5 6 # Python代码块 def fibonacci(n): if n \u0026lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) 1 2 // JavaScript代码块 const greet = (name) =\u0026gt; console.log(`Hello ${name}!`); 4. 表格与引用\r语言 热度 特性 Python ★★★★ 简洁易读 JavaScript ★★★★☆ 全栈开发 Rust ★★★★ 内存安全 引用块嵌套示例\n二级引用：代码是诗，注释是散文\n三级引用：好代码会自己说话\n5. 数学公式（KaTeX）\r行内公式：$\\frac{\\partial f}{\\partial t} = \\nabla \\cdot (D \\nabla f)$\n块级公式： $$ \\begin{bmatrix} a \u0026amp; b \\ c \u0026amp; d \\end{bmatrix} \\begin{bmatrix} x \\ y \\end{bmatrix}\r\\begin{bmatrix} \\alpha \\ \\beta \\end{bmatrix} $$\n6. 扩展功能\r折叠内容\r点击查看配置说明\r1 2 3 4 # 服务器配置 server: port: 8080 ssl: true 脚注示例\r这是一个带有脚注的句子 这是第一个脚注的内容\n引用自Markdown教程 表格技巧详见速优物联指南 1 2 3 4 5 6 7 8 9 --- **关键语法说明**： 1. 代码块使用三个反引号包裹并指定语言类型（如`python`）可实现语法高亮 2. 数学公式通过`$...$`（行内）和`$$...$$`（块级）实现科技文档排版 3. 表格对齐使用冒号标记（`:---`左对齐、`:---:`居中、`---:`右对齐） 4. 折叠区块需配合HTML的`\u0026lt;details\u0026gt;`标签实现交互效果 5. 任务列表通过短横线+方括号（`- [ ]`）创建待办事项 ","date":"2025-04-04T13:05:19+08:00","permalink":"http://localhost:1313/p/slugtest/","title":"全场景md测试"},{"content":"Markdown 全格式测试文档\r1. 标题与段落\r这是普通段落，展示加粗、斜体、删除线和行内代码。\n换行需在行尾添加两个空格或使用\u0026lt;br\u0026gt;标签。\n2. 列表与任务\r无序列表\r苹果 香蕉 进口香蕉 本地香蕉 有序列表\r打开IDE 创建项目 编写代码 任务列表\r学习Markdown基础 掌握高级表格技巧 3. 代码与语法高亮\r行内代码：print(\u0026quot;Hello Markdown\u0026quot;)\n1 2 3 4 5 6 # Python代码块 def fibonacci(n): if n \u0026lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) 1 2 // JavaScript代码块 const greet = (name) =\u0026gt; console.log(`Hello ${name}!`); 4. 表格与引用\r语言 热度 特性 Python ★★★★ 简洁易读 JavaScript ★★★★☆ 全栈开发 Rust ★★★★ 内存安全 引用块嵌套示例\n二级引用：代码是诗，注释是散文\n三级引用：好代码会自己说话\n5. 数学公式（KaTeX）\r行内公式：$\\frac{\\partial f}{\\partial t} = \\nabla \\cdot (D \\nabla f)$\n块级公式： $$ \\begin{bmatrix} a \u0026amp; b \\ c \u0026amp; d \\end{bmatrix} \\begin{bmatrix} x \\ y \\end{bmatrix}\r\\begin{bmatrix} \\alpha \\ \\beta \\end{bmatrix} $$\n6. 扩展功能\r折叠内容\r点击查看配置说明\r1 2 3 4 # 服务器配置 server: port: 8080 ssl: true 脚注示例\r这是一个带有脚注的句子 这是第一个脚注的内容\n引用自Markdown教程 表格技巧详见速优物联指南 1 2 3 4 5 6 7 8 9 --- **关键语法说明**： 1. 代码块使用三个反引号包裹并指定语言类型（如`python`）可实现语法高亮 2. 数学公式通过`$...$`（行内）和`$$...$$`（块级）实现科技文档排版 3. 表格对齐使用冒号标记（`:---`左对齐、`:---:`居中、`---:`右对齐） 4. 折叠区块需配合HTML的`\u0026lt;details\u0026gt;`标签实现交互效果 5. 任务列表通过短横线+方括号（`- [ ]`）创建待办事项 ","date":"2025-04-04T12:55:58+08:00","permalink":"http://localhost:1313/p/%E5%85%A8%E6%A0%BC%E5%BC%8F%E6%B5%8B%E8%AF%95/","title":"全格式测试"},{"content":"","date":"2025-04-04T11:54:34+08:00","permalink":"http://localhost:1313/p/test/","title":"Test"}]